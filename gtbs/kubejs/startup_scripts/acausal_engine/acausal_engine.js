GTCEuStartupEvents.registry('gtceu:machine', event => {

event.create('acausal_engine', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
        .machine((holder) => new CoilWorkableElectricMultiblockMachine(holder))
        .recipeModifiers([(machine, recipe) => GTRecipeModifiers.ebfOverclock(machine, recipe), GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.BATCH_MODE])
        .recipeTypes('acausal_engine')
        .pattern(definition => FactoryBlockPattern.start()
        .aisle('SSS C C C C SSS','               ','               ','               ','               ','               ','               ','               ','               ','SSS C C C C SSS','               ','               ','               ','               ','               ','               ','               ','               ','SSS         SSS')
        .aisle('SSCCCCCCCCCCCSS',' F           F ',' F           F ',' F           F ',' F           F ',' F           F ',' F           F ',' F           F ',' F           F ','SSCCCCCCCCCCCSS',' F           F ',' F           F ',' F           F ',' F           F ',' F           F ',' F           F ',' F           F ',' F           F ','SSCCCCCCCCCCCSS')
        .aisle('SCCCCCCCCCCCCCS','    BBBBBBB    ','               ','               ','               ','               ','               ','               ','    BBBBBBB    ','SCCCCCCCCCCCCCS','    BBBBBBB    ','               ','               ','               ','               ','               ','               ','    BBBBBBB    ','SCCCCCCCCCCCCCS') 
        .aisle(' CCCCCCCCCCCCC ','   BBBBBBBBB   ','     HHHHH     ','     HHHHH     ','     HHHHH     ','     HHHHH     ','     HHHHH     ','     HHHHH     ','   BBBBBBBBB   ',' CCCCCCCCCCCCC ','   BBBBBBBBB   ','     HHHHH     ','     HHHHH     ','     HHHHH     ','     HHHHH     ','     HHHHH     ','     HHHHH     ','   BBBBBBBBB   ',' CCCCCCCCCCCCC ')
        .aisle('CCCCCCCCCCCCCCC','  BBBBBBBBBBB  ','    H     H    ','    H     H    ','    H     H    ','    H     H    ','    H     H    ','    H     H    ','  BBBBBBBBBBB  ','CCCCCCCCCCCCCCC','  BBBBBBBBBBB  ','    H     H    ','    H     H    ','    H     H    ','    H     H    ','    H     H    ','    H     H    ','  BBBBBBBBBBB  ',' CCCCCCCCCCCCC ')
        .aisle(' CCCCCCCCCCCCC ','  BBBB   BBBB  ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','  BBBB   BBBB  ',' CCCCCCCCCCCCC ','  BBBB   BBBB  ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','  BBBB   BBBB  ',' CCCCCCCCCCCCC ')
        .aisle('CCCCCCCCCCCCCCC','  BBBB   BBBB  ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','  BBBB   BBBB  ','CCCCCCCCCCCCCCC','  BBBB   BBBB  ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','  BBBB   BBBB  ',' CCCCCCCCCCCCC ')
        .aisle(' CCCCCCCCCCCCC ','  BBBB   BBBB  ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','  BBBB   BBBB  ',' CCCCCCCCCCCCC ','  BBBB   BBBB  ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','  BBBB   BBBB  ',' CCCCCCCCCCCCC ')
        .aisle('CCCCCCCCCCCCCCC','  BBBB   BBBB  ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','  BBBB   BBBB  ','CCCCCCCCCCCCCCC','  BBBB   BBBB  ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','  BBBB   BBBB  ',' CCCCCCCCCCCCC ')
        .aisle(' CCCCCCCCCCCCC ','  BBBB   BBBB  ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','  BBBB   BBBB  ',' CCCCCCCCCCCCC ','  BBBB   BBBB  ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','   H       H   ','  BBBB   BBBB  ',' CCCCCCCCCCCCC ')
        .aisle('CCCCCCCCCCCCCCC','  BBBBBBBBBBB  ','    H     H    ','    H     H    ','    H     H    ','    H     H    ','    H     H    ','    H     H    ','  BBBBBBBBBBB  ','CCCCCCCCCCCCCCC','  BBBBBBBBBBB  ','    H     H    ','    H     H    ','    H     H    ','    H     H    ','    H     H    ','    H     H    ','  BBBBBBBBBBB  ',' CCCCCCCCCCCCC ')
        .aisle(' CCCCCCCCCCCCC ','   BBBBBBBBB   ','     HHHHH     ','     HHHHH     ','     HHHHH     ','     HHHHH     ','     HHHHH     ','     HHHHH     ','   BBBBBBBBB   ',' CCCCCCCCCCCCC ','   BBBBBBBBB   ','     HHHHH     ','     HHHHH     ','     HHHHH     ','     HHHHH     ','     HHHHH     ','     HHHHH     ','   BBBBBBBBB   ',' CCCCCCCCCCCCC ')
        .aisle('SCCCCCCCCCCCCCS','    BBBBBBB    ','               ','               ','               ','               ','               ','               ','    BBBBBBB    ','SCCCCCCCCCCCCCS','    BBBBBBB    ','               ','               ','               ','               ','               ','               ','    BBBBBBB    ','SCCCCCCCCCCCCCS')
        .aisle('SSCCCCCKCCCCCSS',' F           F ',' F           F ',' F           F ',' F           F ',' F           F ',' F           F ',' F           F ',' F           F ','SSCCCCCCCCCCCSS',' F           F ',' F           F ',' F           F ',' F           F ',' F           F ',' F           F ',' F           F ',' F           F ','SSCCCCCCCCCCCSS')
        .aisle('SSS         SSS','               ','               ','               ','               ','               ','               ','               ','               ','SSS         SSS','               ','               ','               ','               ','               ','               ','               ','               ','SSS         SSS')
        .where('K', Predicates.controller(Predicates.blocks(definition.get())))
        .where('B', Predicates.blocks('gtceu:steel_firebox_casing'))
        .where('S', Predicates.blocks('gtceu:steel_block'))
        .where('F', Predicates.blocks('gtceu:steel_frame'))
        .where('H', Predicates.heatingCoils())
        .where('C', Predicates.blocks('gtceu:solid_machine_casing')
            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
            .or(Predicates.autoAbilities(definition.getRecipeTypes())))
         .build())
        .workableCasingModel(
            "gtceu:block/casings/solid/machine_casing_solid_steel",
            "gtceu:block/multiblock/fusion_reactor",
         
    )

event.create('recursive_assembly_manifold', 'multiblock')
    .rotationState(RotationState.NON_Y_AXIS)
    .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
    .recipeTypes('assembler_module')
    .pattern(definition => FactoryBlockPattern.start()
        .aisle("A", " ", " ", " ", " ", " ", " ", " ", " ", "A", " ", " ", " ", " ", " ", " ", " ", " ", "A")
        .aisle("A", "B", " ", " ", " ", " ", " ", " ", "B", "A", "B", " ", " ", " ", " ", " ", " ", "B", "A")
        .aisle("A", "B", " ", " ", " ", " ", " ", " ", "B", "A", "B", " ", " ", " ", " ", " ", " ", "B", "A")
        .aisle("A", "B", "C", "C", "C", "C", "C", "C", "B", "A", "B", "C", "C", "C", "C", "C", "C", "B", "A")
        .aisle("A", "B", " ", " ", " ", " ", " ", " ", "B", "A", "B", " ", " ", " ", " ", " ", " ", "B", "A")
        .aisle("A", "B", " ", " ", " ", " ", " ", " ", "B", "A", "B", " ", " ", " ", " ", " ", " ", "B", "A")
        .aisle("A", "B", " ", " ", " ", " ", " ", " ", "B", "A", "B", " ", " ", " ", " ", " ", " ", "B", "A")
        .aisle("A", "B", " ", " ", " ", " ", " ", " ", "B", "A", "B", " ", " ", " ", " ", " ", " ", "B", "A")
        .aisle("A", "B", " ", " ", " ", " ", " ", " ", "B", "A", "B", " ", " ", " ", " ", " ", " ", "B", "A")
        .aisle("A", "B", "C", "C", "C", "C", "C", "C", "B", "A", "B", "C", "C", "C", "C", "C", "C", "B", "A")
        .aisle("A", "B", " ", " ", " ", " ", " ", " ", "B", "A", "B", " ", " ", " ", " ", " ", " ", "B", "A")
        .aisle("A", "B", " ", " ", " ", " ", " ", " ", "B", "A", "B", " ", " ", " ", " ", " ", " ", "B", "A")
        .aisle("A", " ", " ", " ", " ", " ", " ", " ", " ", "A", " ", " ", " ", " ", " ", " ", " ", " ", "A")
        .aisle("A", " ", " ", " ", " ", " ", " ", " ", " ", "A", " ", " ", " ", " ", " ", " ", " ", " ", " ")
        .aisle("A", "K", "I", "I", "I", "I", "I", "I", "I", "A", " ", " ", " ", " ", " ", " ", " ", " ", " ")
        .where('A', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get()))
        .where('I', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get())
            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
            .or(Predicates.autoAbilities(definition.getRecipeTypes())))
        .where('K', Predicates.controller(Predicates.blocks(definition.get())))
        .where('B', Predicates.blocks('gtceu:steel_firebox_casing'))
        .where('C', Predicates.heatingCoils())

                 .build())
        .workableCasingModel(
            "gtceu:block/casings/solid/machine_casing_solid_steel",
            "gtceu:block/machines/assembler",
         
    )

})