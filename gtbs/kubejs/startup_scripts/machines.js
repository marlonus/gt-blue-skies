GTCEuStartupEvents.registry('gtceu:machine', event => {

   

    event.create('primitive_greenhouse', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
        .recipeTypes('greenhouse')
        .pattern(definition => FactoryBlockPattern.start()
            .aisle('FSMSF', 'FGGGF', 'FGGGF', ' GGG ')
            .aisle('SDDDS', 'G   G', 'G   G', 'G   G')
            .aisle('SDWDS', 'G   G', 'G   G', 'G   G')
            .aisle('SDDDS', 'G   G', 'G   G', 'G   G')
            .aisle('FSKSF', 'FGGGF', 'FGGGF', ' GGG ')
            .where('K', Predicates.controller(Predicates.blocks(definition.get())))
            .where('M', Predicates.abilities(PartAbility.MAINTENANCE))
            .where('F', Predicates.blocks('gtceu:wood_frame'))
            .where('G', Predicates.blocks('minecraft:glass'))
            .where('D', Predicates.blocks('minecraft:farmland'))
            .where('W', Predicates.fluids('minecraft:water'))
            .where('S', Predicates.blocks('minecraft:stone')
                .or(Predicates.autoAbilities(definition.getRecipeTypes())))
        .build())
        .workableCasingModel(
            "minecraft:block/stone",
            "gtceu:block/multiblock/large_miner",
        )
    
    event.create('large_coke_oven', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
        .recipeTypes('lcorecipe')
        .pattern(definition => FactoryBlockPattern.start()
            .aisle('FSMSF', 'FSSSF', 'FSSSF', 'FSSSF', 'FSSSF')
            .aisle('SSSSS', 'S   S', 'S   S', 'S   S', 'SSSSS')
            .aisle('SSSSS', 'S   S', 'S   S', 'S   S', 'SSSSS')
            .aisle('SSSSS', 'S   S', 'S   S', 'S   S', 'SSSSS')
            .aisle('FSSSF', 'FSSSF', 'FSKSF', 'FSSSF', 'FSSSF')
            .where('K', Predicates.controller(Predicates.blocks(definition.get())))
            .where('M', Predicates.abilities(PartAbility.MAINTENANCE))
            .where('F', Predicates.blocks('gtceu:wood_frame'))
            .where('S', Predicates.blocks('gtceu:firebricks')
                .or(Predicates.autoAbilities(definition.getRecipeTypes())))
        .build())
        .workableCasingModel(
            "gtceu:block/casings/solid/machine_primitive_bricks",
            "gtceu:block/multiblock/large_miner",
        )

    event.create('primitive_mixer', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
        .recipeTypes('primitive_mixing')
        .pattern(definition => FactoryBlockPattern.start()
            .aisle('FBMBF    ', 'FBBBF    ', 'FBBBF    ', 'FBBBF    ', '         ', '         ')
            .aisle('BBBBB BBB', 'B   B    ', 'B   B    ', 'B   B    ', '         ', '         ')
            .aisle('BBBBB BBB', 'B   B  B ', 'B   B  B ', 'B I B  B ', '  B    B ', '  BBBBBB ')
            .aisle('BBBBB BBB', 'B   B    ', 'B   B    ', 'B   B    ', '         ', '         ')
            .aisle('FBBBF    ', 'FBBBF    ', 'FBKBF    ', 'FBBBF    ', '         ', '         ')
            .where('K', Predicates.controller(Predicates.blocks(definition.get())))
            .where('M', Predicates.abilities(PartAbility.MAINTENANCE))
            .where('F', Predicates.blocks('gtceu:wood_frame'))
            .where('I', Predicates.blocks('minecraft:iron_block'))
            .where('B', Predicates.blocks('minecraft:bricks')
                .or(Predicates.autoAbilities(definition.getRecipeTypes())))
        .build())
        .workableCasingModel(
            "minecraft:block/bricks",
            "gtceu:block/multiblock/large_miner",
        )
    
    event.create('large_primitive_blast_furnace', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
        .recipeTypes('lpbfrecipe')
        .pattern(definition => FactoryBlockPattern.start()
            .aisle('     SMS     ', '     SSS     ', '     SSS     ', '     SSS     ', '     SSS     ', '     SSS     ', '             ', '             ')
            .aisle('BBB SSSSS BBB', 'BBB S   S BBB', 'BBB S   S BBB', '    S   S    ', '    S   S    ', '    SSSSS    ', '     SSS     ', '      S      ')
            .aisle('BBB SSSSS BBB', 'B B S   S B B', 'BBB S   S BBB', ' B  S   S  B ', ' BBBS   SBBB ', '    SS SS    ', '     S S     ', '     S S     ')
            .aisle('BBB SSSSS BBB', 'BBB S   S BBB', 'BBB S   S BBB', '    S   S    ', '    S   S    ', '    SSSSS    ', '     SSS     ', '      S      ')
            .aisle('     SSS     ', '     SSS     ', '     SKS     ', '     SSS     ', '     SSS     ', '     SSS     ', '             ', '             ')
            .where('K', Predicates.controller(Predicates.blocks(definition.get())))
            .where('M', Predicates.abilities(PartAbility.MAINTENANCE))
            .where('B', Predicates.blocks('minecraft:bricks'))
            .where('S', Predicates.blocks('gtceu:firebricks')
                .or(Predicates.autoAbilities(definition.getRecipeTypes())))
        .build())
        .workableCasingModel(
            "gtceu:block/casings/solid/machine_primitive_bricks",
            "gtceu:block/multiblock/large_miner",
        ) 

    event.create('low_pressure_steam_boiler', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
        .recipeTypes('lpsb')
        .pattern(definition => FactoryBlockPattern.start()
        .aisle('FMF', 'CCC', 'CCC', 'CCC', 'CCC')
        .aisle('FFF', 'C C', 'C C', 'C C', 'CCC')
        .aisle('FFF', 'CKC', 'CCC', 'CCC', 'CCC')
        .where('K', Predicates.controller(Predicates.blocks(definition.get())))
        .where('M', Predicates.abilities(PartAbility.MAINTENANCE))
        .where('C', Predicates.blocks('gtceu:solid_machine_casing'))
        .where('F', Predicates.blocks('gtceu:steel_firebox_casing')
            .or(Predicates.autoAbilities(definition.getRecipeTypes())))
         .build())
        .workableCasingModel(
            "gtceu:block/casings/solid/machine_casing_solid_steel",
            "gtceu:block/multiblock/large_miner",
        ) 

    event.create('low_pressure_steam_turbine', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
        .recipeTypes('lpst')
        .pattern(definition => FactoryBlockPattern.start()
        .aisle('CCC', 'CDC', 'CCC')
        .aisle('CRC', 'RSR', 'CRC')        
        .aisle('CCC', 'CSC', 'CCC')        
        .aisle('   ', ' S ', '   ')
        .aisle('CCC', 'CSC', 'CCC')
        .aisle('CCC', 'CSC', 'CCC')
        .aisle('CCC', 'CSC', 'CCC')
        .aisle('CCC', 'CSC', 'CCC')
        .aisle('CMC', 'CKC', 'CCC')
        .where('K', Predicates.controller(Predicates.blocks(definition.get())))
        .where('M', Predicates.abilities(PartAbility.MAINTENANCE))
        .where('D', Predicates.abilities(PartAbility.OUTPUT_ENERGY))
        .where('R', Predicates.blocks('minecraft:redstone_block'))
        .where('S', Predicates.blocks('gtceu:steel_block'))
        .where('C', Predicates.blocks('gtceu:solid_machine_casing')
            .or(Predicates.autoAbilities(definition.getRecipeTypes())))
         .build())
        .workableCasingModel(
            "gtceu:block/casings/solid/machine_casing_solid_steel",
            "gtceu:block/multiblock/large_miner",
        ) 

        event.create('lv_void_extractor', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
            .recipeTypes('void_extractor')
            .pattern(definition => FactoryBlockPattern.start()
                .aisle("AAAAA", " BBB ", "  B  ", "  B  ", "  B  ", "     ", "     ", "     ", "     ", "     ", "     ")
                .aisle("AAAAA", "BB BB", "     ", "     ", "  B  ", "  B  ", "  B  ", "  B  ", "     ", "     ", "     ")
                .aisle("AAAAA", "B D B", "B D B", "B D B", "BBDBB", " BDB ", " BDB ", " BBB ", "  B  ", "  B  ", "  B  ")
                .aisle("AAAAA", "BB BB", "     ", "     ", "  B  ", "  B  ", "  B  ", "  B  ", "     ", "     ", "     ")
                .aisle("AAKAA", " BBB ", "  B  ", "  B  ", "  B  ", "     ", "     ", "     ", "     ", "     ", "     ")
                    .where('K', Predicates.controller(Predicates.blocks(definition.get())))
                    .where('A', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get())
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
            )
                    .where('B', Predicates.blocks('gtceu:steel_frame'))
                    .where('D', Predicates.blocks('gtceu:steel_block'))
                .build())
            .workableCasingModel(
            "gtceu:block/casings/solid/machine_casing_solid_steel",
            "gtceu:block/multiblock/large_miner",
        ) 

        event.create('lv_void_purifier', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
            .recipeTypes('void_purifier')
            .pattern(definition => FactoryBlockPattern.start()
                .aisle("AAAAA", "ACCCA", "ACCCA", "ACCCA", "AAAAA")
                .aisle("AAAAA", "CDDDC", "CDDDC", "CDDDC", "AAAAA")
                .aisle("AAAAA", "CDFDC", "CDFDC", "CDFDC", "AAAAA")
                .aisle("AAAAA", "CDDDC", "CDDDC", "CDDDC", "AAAAA")
                .aisle("AABAA", "ACCCA", "ACCCA", "ACCCA", "AAAAA")
                    .where('A', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get())
                        .or(Predicates.autoAbilities(definition.getRecipeTypes()))
        )
                    .where('B', Predicates.controller(Predicates.blocks(definition.get())))
                    .where('D', Predicates.fluids('water')
                        .or(Predicates.fluids("flowing_water")))
                    .where('C', Predicates.blocks('connectedglass:borderless_glass'))
                    .where('F', Predicates.blocks('gtceu:steel_block'))
                .build())
            .workableCasingModel(
                "gtceu:block/casings/solid/machine_casing_solid_steel",
                "gtceu:block/multiblock/large_miner",
            )

        event.create('aromatic_combustion_reactor', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('combustion_reactor')
            .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
            .pattern(definition => FactoryBlockPattern.start()
                .aisle("AAAAA", "B   B", "B   B", "B   B", "AAAAA")
                .aisle("AAAAA", " CCC ", " CCC ", " CCC ", "AAAAA")
                .aisle("AAAAA", " C C ", " C C ", " C C ", "AAAAA")
                .aisle("AAAAA", " CCC ", " CCC ", " CCC ", "AAAAA")
                .aisle("AAKAA", "B   B", "B   B", "B   B", "AAAAA")
                    .where('K', Predicates.controller(Predicates.blocks(definition.get())))
                    .where('A', Predicates.blocks(GTBlocks.CASING_INVAR_HEATPROOF.get())
                        .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                        .or(Predicates.abilities(PartAbility.OUTPUT_ENERGY).setMinGlobalLimited(1).setMaxGlobalLimited(4))
        )
                    .where('B', Predicates.blocks('gtceu:aluminium_frame'))
                    .where('C', Predicates.heatingCoils())
                            .build())
            .workableCasingModel(
                "gtceu:block/casings/solid/machine_casing_heatproof",
                "gtceu:block/multiblock/generator/extreme_combustion_engine",
            )

        event.create('voidpiercer_drill_engine', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
            .recipeTypes('drill_engine')
            .pattern(definition => FactoryBlockPattern.start()
                .aisle("       AAA       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                .aisle(" BBBBBBAAABBBBBB ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                .aisle(" B     AAA     B ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                .aisle(" B      C      B ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                .aisle(" B  DAAADAAAD  B ", "    B       B    ", "    B       B    ", "    B       B    ", "    DAAADAAAD    ", "        B        ", "        B        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                .aisle(" B  ABBBABBBA  B ", "                 ", "                 ", "                 ", "    A       A    ", "                 ", "        B        ", "                 ", "                 ", "        B        ", "        B        ", "      BBBBB      ", "     DAAAAAD     ", "        D        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                .aisle(" B  ABBAAABBA  B ", "                 ", "                 ", "                 ", "    A   B   A    ", "        B        ", "      BBBBB      ", "      B B B      ", "      B B B      ", "      B B B      ", "      B   B      ", "     BB   BB     ", "     AA   AA     ", "        A        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                .aisle("AAA ABAAAAABA AAA", "        B        ", "        B        ", "        B        ", "    A   B   A    ", "                 ", "      B   B      ", "                 ", "                 ", "                 ", "                 ", "     B     B     ", "     A     A     ", "        A        ", "        D        ", "        B        ", "        B        ", "                 ", "                 ", "                 ")
                .aisle("AAACDAAABAAADCAAA", " C     BEB     C ", " C     BEB     C ", " C     BEB     C ", " C  D BBEBB D  C ", " C  B B E B B  C ", " C  BBB E BBB  C ", " C    B E B    C ", " C    B E B    C ", " C   BB E BB   C ", " C   B  E  B   C ", " C   B  E  B   C ", " CC  A  E  A  CC ", "  CCCDAAEAADCCC  ", "       DED       ", "       BEB       ", "       BEB       ", "        B        ", "        B        ", "        B        ")
                .aisle("AAA ABAAAAABA AAA", "        B        ", "        B        ", "        B        ", "    A   B   A    ", "                 ", "      B   B      ", "                 ", "                 ", "                 ", "                 ", "     B     B     ", "     A     A     ", "        A        ", "        D        ", "        B        ", "        B        ", "                 ", "                 ", "                 ")
                .aisle(" B  ABBAAABBA  B ", "                 ", "                 ", "                 ", "    A   B   A    ", "        B        ", "      BBBBB      ", "      B B B      ", "      B B B      ", "      B B B      ", "      B   B      ", "     BB   BB     ", "     AA   AA     ", "        A        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                .aisle(" B  ABBBABBBA  B ", "                 ", "                 ", "                 ", "    A       A    ", "                 ", "        B        ", "                 ", "                 ", "        B        ", "        B        ", "      BBBBB      ", "     DAAAAAD     ", "        D        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                .aisle(" B  DAAADAAAD  B ", "    B       B    ", "    B       B    ", "    B       B    ", "    DAAADAAAD    ", "        B        ", "        B        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                .aisle(" B      C      B ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                .aisle(" B     AAA     B ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                .aisle(" BBBBBBAAABBBBBB ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                .aisle("       AKA       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")

                    .where('A', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get())
                        .or(Predicates.autoAbilities(definition.getRecipeTypes()))
        )
                    .where('K', Predicates.controller(Predicates.blocks(definition.get())))
                    .where('B', Predicates.blocks('gtceu:steel_frame'))
                    .where('C', Predicates.blocks('gtceu:bronze_frame'))
                    .where('D', Predicates.blocks('gtceu:lv_machine_casing'))
                    .where('E', Predicates.blocks('minecraft:redstone_block'))


                .build())
            .workableCasingModel(
                "gtceu:block/casings/solid/machine_casing_solid_steel",
                "gtceu:block/multiblock/fusion_reactor",
            )

        
        event.create('industrial_pbf', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('ipbf')
            .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
            .pattern(definition => FactoryBlockPattern.start()
                .aisle("  AAAAA  ", "         ", "         ", "         ", "   BBB   ", "         ", "         ", "         ", "         ", "         ")
                .aisle(" AAAAAAA ", " B CCC B ", " B CCC B ", " B CCC B ", " BBCCCBB ", " B CCC B ", " B CCC B ", " B CCC B ", "         ", "         ")
                .aisle("AAAAAAAAA", "  C   C  ", "  C   C  ", "  C   C  ", " BC   CB ", "  C   C  ", "  C   C  ", "  CC CC  ", "  BCCCB  ", "         ")
                .aisle("AAAAAAAAA", " C     C ", " C     C ", " C     C ", "BC     CB", " C     C ", " C     C ", " CC   CC ", "  CC CC  ", "   BBB   ")
                .aisle("AAAAAAAAA", " C     C ", " C     C ", " C     C ", "BC     CB", " C     C ", " C     C ", " C     C ", "  C   C  ", "   BBB   ")
                .aisle("AAAAAAAAA", " C     C ", " C     C ", " C     C ", "BC     CB", " C     C ", " C     C ", " CC   CC ", "  CC CC  ", "   BBB   ")
                .aisle("AAAAAAAAA", "  C   C  ", "  C   C  ", "  C   C  ", " BC   CB ", "  C   C  ", "  C   C  ", "  CC CC  ", "  BCCCB  ", "         ")
                .aisle(" AAAAAAA ", " B CCC B ", " B CCC B ", " B CCC B ", " BBCCCBB ", " B CCC B ", " B CCC B ", " B CCC B ", "         ", "         ")
                .aisle("  AAKAA  ", "         ", "         ", "         ", "   BBB   ", "         ", "         ", "         ", "         ", "         ")
                    .where('K', Predicates.controller(Predicates.blocks(definition.get())))
                    .where('B', Predicates.blocks('gtceu:steel_frame'))
                    .where('A', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get())
                        .or(Predicates.autoAbilities(definition.getRecipeTypes()))
        )
                    .where('C', Predicates.blocks('gtceu:firebricks'))
                            .build())
            .workableCasingModel(
                "gtceu:block/casings/solid/machine_casing_solid_steel",
                "gtceu:block/multiblock/large_miner",
            )  
            
        event.create('large_greenhouse', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
            .recipeTypes('large_greenhouse')
            .pattern(definition => FactoryBlockPattern.start()
                .aisle("AAAAAAA", "BCCCCCB", "BCCCCCB", "BCCCCCB", "BBCCCBB", " BBBBB ")
                .aisle("ADDDDDA", "C     C", "C     C", "C     C", "B     B", "BBCCCBB")
                .aisle("ADDDDDA", "C     C", "C     C", "C     C", "C     C", "BCCCCCB")
                .aisle("ADDEDDA", "C     C", "C     C", "C     C", "C     C", "BCCCCCB")
                .aisle("ADDDDDA", "C     C", "C     C", "C     C", "C     C", "BCCCCCB")
                .aisle("ADDDDDA", "C     C", "C     C", "C     C", "B     B", "BBCCCBB")
                .aisle("AAAKAAA", "BCCCCCB", "BCCCCCB", "BCCCCCB", "BBCCCBB", " BBBBB ")
                    .where('A', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get())
                        .or(Predicates.autoAbilities(definition.getRecipeTypes()))
        )
                    .where('K', Predicates.controller(Predicates.blocks(definition.get())))
                    .where('E', Predicates.fluids('water'))
                    .where('C', Predicates.blocks('connectedglass:borderless_glass'))
                    .where('D', Predicates.blocks('minecraft:farmland'))
                    .where('B', Predicates.blocks('gtceu:steel_frame'))
                .build())
            .workableCasingModel(
                "gtceu:block/casings/solid/machine_casing_solid_steel",
                "gtceu:block/multiblock/large_miner",
            )

        event.create('large_inscriber', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
            .recipeTypes('large_inscriber')     
            .pattern(definition => FactoryBlockPattern.start()
                .aisle("ABBBBBA", "A     A", "A     A", "AAAAAAA", "A     A", "A     A", "ABBBBBA")
                .aisle("BBBBBBB", "       ", "       ", "A  A  A", "       ", "       ", "BBBBBBB")
                .aisle("BBBBBBB", "       ", "  CCC  ", "A CCC A", "  CCC  ", "       ", "BBBBBBB")
                .aisle("BBBBBBB", "   A   ", "  CCC  ", "AACCCAA", "  CCC  ", "   A   ", "BBBBBBB")
                .aisle("BBBBBBB", "       ", "  CCC  ", "A CCC A", "  CCC  ", "       ", "BBBBBBB")
                .aisle("BBBBBBB", "       ", "       ", "A  A  A", "       ", "       ", "BBBBBBB")
                .aisle("ABBKBBA", "A     A", "A     A", "AAAAAAA", "A     A", "A     A", "ABBBBBA")
                    .where('A', Predicates.blocks('gtceu:aluminium_frame'))
                    .where('C', Predicates.blocks('gtceu:steel_block'))
                    .where('B', Predicates.blocks(GTBlocks.CASING_ALUMINIUM_FROSTPROOF.get())
                        .or(Predicates.autoAbilities(definition.getRecipeTypes()))
        )
                    .where('K', Predicates.controller(Predicates.blocks(definition.get())))                
                        .build())          
            
            .workableCasingModel(
                "gtceu:block/casings/solid/machine_casing_frost_proof",
                "gtceu:block/multiblock/large_miner",
            )

        event.create('astral_extractor', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
            .recipeTypes('astral_extractor')     
            .pattern(definition => FactoryBlockPattern.start()
                .aisle("                 ", "                 ", "                 ", "                 ", "                 ", "        A        ", "       ABA       ", "      AAAAA      ", "     ABAAABA     ", "      AAAAA      ", "       ABA       ", "        A        ", "                 ", "                 ", "                 ", "                 ", "                 ")
                .aisle("                 ", "                 ", "                 ", "        A        ", "        A        ", "        A        ", "                 ", "                 ", "   AAA  C  AAA   ", "                 ", "                 ", "        A        ", "        A        ", "        A        ", "                 ", "                 ", "                 ")
                .aisle("                 ", "                 ", "        A        ", "        A        ", "                 ", "                 ", "                 ", "                 ", "  AA    C    AA  ", "                 ", "                 ", "                 ", "                 ", "        A        ", "        A        ", "                 ", "                 ")
                .aisle("                 ", "        A        ", "        A        ", "                 ", "                 ", "                 ", "                 ", "                 ", " AA     C     AA ", "                 ", "                 ", "                 ", "                 ", "                 ", "        A        ", "        A        ", "                 ")
                .aisle("                 ", "        A        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", " A      C      A ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "        A        ", "                 ")
                .aisle("        A        ", "        A        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "AA      C      AA", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "        A        ", "        A        ")
                .aisle("       ABA       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "A      DDD      A", "B      DDD      B", "A      DDD      A", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "       ABA       ")
                .aisle("      AAAAA      ", "                 ", "                 ", "                 ", "                 ", "                 ", "A      DDD      A", "A     DDDDD     A", "A     DDDDD     A", "A     DDDDD     A", "A      DDD      A", "                 ", "                 ", "                 ", "                 ", "                 ", "      AAAAA      ")
                .aisle("     ABAAABA     ", "   AAA  C  AAA   ", "  AA    C    AA  ", " AA     C     AA ", " A      C      A ", "AA      C      AA", "B      DDD      B", "A     DDDDD     A", "ACCCCCDDDDDCCCCCA", "A     DDDDD     A", "B      DDD      B", "AA      C      AA", " A      C      A ", " AA     C     AA ", "  AA    C    AA  ", "   AAA  C  AAA   ", "     ABAAABA     ")
                .aisle("      AAAAA      ", "                 ", "                 ", "                 ", "                 ", "                 ", "A      DDD      A", "A     DDDDD     A", "A     DDDDD     A", "A     DDDDD     A", "A      DDD      A", "                 ", "                 ", "                 ", "                 ", "                 ", "      AAAAA      ")
                .aisle("       ABA       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "A      DDD      A", "B      DDD      B", "A      DDD      A", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "       ABA       ")
                .aisle("        A        ", "        A        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "AA      C      AA", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "        A        ", "        A        ")
                .aisle("                 ", "        A        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", " A      C      A ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "        A        ", "                 ")
                .aisle("                 ", "        K        ", "        A        ", "                 ", "                 ", "                 ", "                 ", "                 ", " AA     C     AA ", "                 ", "                 ", "                 ", "                 ", "                 ", "        A        ", "        A        ", "                 ")
                .aisle("                 ", "                 ", "        A        ", "        A        ", "                 ", "                 ", "                 ", "                 ", "  AA    C    AA  ", "                 ", "                 ", "                 ", "                 ", "        A        ", "        A        ", "                 ", "                 ")
                .aisle("                 ", "                 ", "                 ", "        A        ", "        A        ", "        A        ", "                 ", "                 ", "   AAA  C  AAA   ", "                 ", "                 ", "        A        ", "        A        ", "        A        ", "                 ", "                 ", "                 ")
                .aisle("                 ", "                 ", "                 ", "                 ", "                 ", "        A        ", "       ABA       ", "      AAAAA      ", "     ABAAABA     ", "      AAAAA      ", "       ABA       ", "        A        ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .where('C', Predicates.blocks('gtceu:steel_frame'))
                    .where('B', Predicates.blocks('gtceu:lv_machine_casing'))
                    .where('D', Predicates.blocks('gtceu:white_borderless_lamp')
                        .or(Predicates.blocks('gtceu:red_borderless_lamp'))
                        .or(Predicates.blocks('gtceu:cyan_borderless_lamp'))
                        .or(Predicates.blocks('gtceu:orange_borderless_lamp'))
                        .or(Predicates.blocks('gtceu:yellow_borderless_lamp'))
                        .or(Predicates.blocks('gtceu:black_borderless_lamp'))
                        .or(Predicates.blocks('gtceu:green_borderless_lamp'))
                        .or(Predicates.blocks('gtceu:brown_borderless_lamp'))
                        .or(Predicates.blocks('gtceu:blue_borderless_lamp'))
                        .or(Predicates.blocks('gtceu:light_gray_borderless_lamp'))
                        .or(Predicates.blocks('gtceu:gray_borderless_lamp'))
                        .or(Predicates.blocks('gtceu:pink_borderless_lamp'))
                        .or(Predicates.blocks('gtceu:lime_borderless_lamp'))
                        .or(Predicates.blocks('gtceu:light_blue_borderless_lamp'))
                        .or(Predicates.blocks('gtceu:magenta_borderless_lamp'))
                        .or(Predicates.blocks('gtceu:purple_borderless_lamp')))
                    .where('A', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get())
                        .or(Predicates.autoAbilities(definition.getRecipeTypes()))
        )
                    .where('K', Predicates.controller(Predicates.blocks(definition.get())))                
                                       .build())          
            
            .workableCasingModel(
                "gtceu:block/casings/solid/machine_casing_solid_steel",
                "gtceu:block/multiblock/large_miner",
            )
            
        event.create('large_mineral_extractor', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
            .recipeTypes('large_mineral_extractor')     
            .pattern(definition => FactoryBlockPattern.start()
            .aisle(" AAAAAAAAA ", "AB   B   BA", "A B  B  B A", "A  B B B  A", "A   BBB   A", "ABBBBBBBBBA", "A   BBB   A", "A  B B B  A", "A B  B  B A", "AB   B   BA", " AAAAAAAAA ")
            .aisle("AB   B   BA", "BB       BB", "           ", "           ", "           ", "B    B    B", "           ", "           ", "           ", "BB       BB", "AB   B   BA")
            .aisle("A B  B  B A", "           ", "B B     B B", "           ", "           ", "B    B    B", "           ", "           ", "B B     B B", "           ", "A B  B  B A")
            .aisle("A  B B B  A", "           ", "           ", "B  B   B  B", "           ", "B    B    B", "           ", "B  B   B  B", "           ", "           ", "A  B B B  A")
            .aisle("A   BBB   A", "           ", "           ", "           ", "B   B B   B", "B    B    B", "B   B B   B", "           ", "           ", "           ", "A   BBB   A")
            .aisle("ABBBBBBBBBA", "B    B    B", "B    B    B", "B    B    B", "B    B    B", "BBBBBBBBBBB", "B    B    B", "B    B    B", "B    B    B", "B    B    B", "ABBBBBBBBBA")
            .aisle("A   BBB   A", "           ", "           ", "           ", "B   B B   B", "B    B    B", "B   B B   B", "           ", "           ", "           ", "A   BBB   A")
            .aisle("A  B B B  A", "           ", "           ", "B  B   B  B", "           ", "B    B    B", "           ", "B  B   B  B", "           ", "           ", "A  B B B  A")
            .aisle("A B  B  B A", "           ", "B B     B B", "           ", "           ", "B    B    B", "           ", "           ", "B B     B B", "           ", "A B  B  B A")
            .aisle("AB   B   BA", "BB       BB", "           ", "           ", "           ", "B    B    B", "           ", "           ", "           ", "BB       BB", "AB   B   BA")
            .aisle(" AAAAKAAAA ", "AB   B   BA", "A B  B  B A", "A  B B B  A", "A   BBB   A", "ABBBBBBBBBA", "A   BBB   A", "A  B B B  A", "A B  B  B A", "AB   B   BA", " AAAAAAAAA ")

            .where('B', Predicates.blocks('gtceu:steel_frame'))
            .where('A', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get())
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
)
            .where('K', Predicates.controller(Predicates.blocks(definition.get())))                
                .build())          
            
            .workableCasingModel(
                "gtceu:block/casings/solid/machine_casing_solid_steel",
                "gtceu:block/multiblock/large_miner",
            )

        event.create('hv_steam_turbine_mb', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('hv_steam_turbine_mb')     
            .pattern(definition => FactoryBlockPattern.start()
                .aisle("AAAAA", "ABBBA", "ABBBA", "ABBBA", "ABBBA", "ABBBA", "ABBBA", "ABBBA", "AAAAA")
                .aisle("ACCCA", "B   B", "B   B", "B   B", "B   B", "B   B", "B   B", "B   B", "ACCCA")
                .aisle("ACDCA", "B D B", "B D B", "B D B", "B D B", "B D B", "B D B", "B D B", "ACDCA")
                .aisle("ACCCA", "B   B", "B   B", "B   B", "B   B", "B   B", "B   B", "B   B", "ACCCA")
                .aisle("AAKAA", "ABBBA", "ABBBA", "ABBBA", "ABBBA", "ABBBA", "ABBBA", "ABBBA", "AAAAA")
            .where('A', Predicates.blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
)
            .where('B', Predicates.blocks('connectedglass:borderless_glass'))
            .where('C', Predicates.blocks('gtceu:stainless_steel_frame'))
            .where('D', Predicates.blocks('gtceu:stainless_steel_turbine_casing'))
            .where('K', Predicates.controller(Predicates.blocks(definition.get())))                
                .build())          
            .workableCasingModel(
                "gtceu:block/casings/solid/machine_casing_clean_stainless_steel",
                "gtceu:block/multiblock/large_miner",
            )

        event.create('orbital_gas_siphon', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('orbital_gas_siphon')
            .pattern(definition => FactoryBlockPattern.start()
                .aisle("           ", "           ", "           ", "           ", "           ", "           ", "           ", " ABBBBBBBA ", "           ", "           ", "           ", "           ", "           ", "           ")
                .aisle("           ", "           ", "     C     ", "     C     ", "     C     ", "     C     ", "     C     ", "AADDDDDDDAA", " E       E ", " E       E ", " E       E ", " FDDDDDDDF ", "           ", "           ")
                .aisle("     G     ", "     G     ", "  CHHHHHC  ", "  C     C  ", "  C     C  ", "  C     C  ", "  C     C  ", "BDD     DDB", "           ", "           ", "           ", " DIIIJIIID ", "  KKKKKKK  ", "           ")
                .aisle("   G   G   ", "   G   G   ", "  HH   HH  ", "           ", "           ", "           ", "           ", "BD       DB", "           ", "           ", "           ", " DII J IID ", "  KKKKKKK  ", "           ")
                .aisle("           ", "           ", "  H     H  ", "           ", "           ", "           ", "           ", "BD       DB", "           ", "           ", "           ", " DI  L  ID ", "  KKK KKK  ", "           ")
                .aisle("  G  M  G  ", "  G  M  G  ", " CH  M  HC ", " C   M   C ", " C   M   C ", " C   M   C ", " C   M   C ", "BD   M   DB", "     M     ", "     M     ", "     M     ", " DJJLNLJJD ", "  KK N KK  ", "     N     ")
                .aisle("           ", "           ", "  H     H  ", "           ", "           ", "           ", "           ", "BD       DB", "           ", "           ", "           ", " DI  L  ID ", "  KKK KKK  ", "           ")
                .aisle("   G   G   ", "   G   G   ", "  HH   HH  ", "           ", "           ", "           ", "           ", "BD       DB", "           ", "           ", "           ", " DII J IID ", "  KKKKKKK  ", "           ")
                .aisle("     G     ", "     G     ", "  CHHHHHC  ", "  C     C  ", "  C     C  ", "  C     C  ", "  C     C  ", "BDD     DDB", "           ", "           ", "           ", " DIIIJIIID ", "  KKKYKKK  ", "           ")
                .aisle("           ", "           ", "     C     ", "     C     ", "     C     ", "     C     ", "     C     ", "AADDDDDDDAA", " E       E ", " E       E ", " E       E ", " FDDDDDDDF ", "           ", "           ")
                .aisle("           ", "           ", "           ", "           ", "           ", "           ", "           ", " ABBBBBBBA ", "           ", "           ", "           ", "           ", "           ", "           ")
                
                .where('G', Predicates.blocks('gtceu:titanium_block'))
                .where('M', Predicates.heatingCoils())
                .where('C', Predicates.blocks('gtceu:stainless_steel_block'))
                .where('H', Predicates.blocks('gtceu:titanium_frame'))
                .where('D', Predicates.blocks('gtceu:stainless_steel_frame'))
                .where('A', Predicates.blocks('gtceu:steel_block'))
                .where('B', Predicates.blocks('gtceu:aluminium_frame'))
                .where('E', Predicates.blocks('gtceu:steel_frame'))
                .where('F', Predicates.blocks('gtceu:aluminium_block'))
                .where('I', Predicates.blocks('gtceu:frostproof_machine_casing'))
                .where('J', Predicates.blocks('gtceu:titanium_gearbox'))
                .where('L', Predicates.blocks('gtnn:process_machine_casing'))
                .where('N', Predicates.blocks('gtceu:clean_machine_casing'))
                .where('K', Predicates.blocks('gtceu:solid_machine_casing')

                .or(Predicates.autoAbilities(definition.getRecipeTypes())))
                .where('Y', Predicates.controller(Predicates.blocks(definition.get())))

                .build())          
            .workableCasingModel(
                "gtceu:block/casings/solid/machine_casing_solid_steel",
                "gtceu:block/multiblock/fusion_reactor",)

        event.create('slaughterhouse', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('slaughterhouse')
            .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH])
            .pattern(definition => FactoryBlockPattern.start()
                .aisle("AAAAA", "ABBBA", "ABBBA", "ABBBA", "ABBBA", "AAAAA")
                .aisle("AAAAA", "BCCCB", "B   B", "B   B", "B   B", "ABBBA")
                .aisle("AAAAA", "BCCCB", "B   B", "B   B", "B   B", "ABBBA")
                .aisle("AAAAA", "BCCCB", "B   B", "B   B", "B   B", "ABBBA")
                .aisle("AAYAA", "ABBBA", "ABBBA", "ABBBA", "ABBBA", "AAAAA")
                .where('A', Predicates.blocks('gtceu:clean_machine_casing')
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1)))
                .where('C', Predicates.blocks('gtceu:solid_machine_casing'))
                .where('B', Predicates.blocks('gtceu:tempered_glass'))
                .where('Y', Predicates.controller(Predicates.blocks(definition.get())))
                .build())          
                .workableCasingModel(
                "gtceu:block/casings/solid/machine_casing_clean_stainless_steel",
                "gtceu:block/multiblock/fusion_reactor",)

        event.create('orbital_assembler', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('orbital_assembler')
            .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH])
            .pattern(definition => FactoryBlockPattern.start()
                .aisle("ABBBBBBBA", "BCCCCCCCB", "BCCCCCCCB", "BCCCCCCCB", "ABBBBBBBA")
                .aisle("BDDDDDDDB", "C       C", "C       C", "C       C", "BEFCFCFEB")
                .aisle("BDDDDDDDB", "C       C", "C       C", "C       C", "BFCCFCCFB")
                .aisle("BDDDDDDDB", "C       C", "C       C", "C       C", "BCCCECCCB")
                .aisle("BDDDDDDDB", "C       C", "C       C", "C       C", "BFFECEFFB")
                .aisle("BDDDDDDDB", "C       C", "C       C", "C       C", "BCCCECCCB")
                .aisle("BDDDDDDDB", "C       C", "C       C", "C       C", "BFCCFCCFB")
                .aisle("BDDDDDDDB", "C       C", "C       C", "C       C", "BEFCFCFEB")
                .aisle("ABBBYBBBA", "BCCCCCCCB", "BCCCCCCCB", "BCCCCCCCB", "ABBBBBBBA")
            .where('C', Predicates.blocks('gtceu:tempered_glass'))
            .where('D', Predicates.blocks('gtceu:solid_machine_casing'))
            .where('F', Predicates.blocks('gtceu:stable_machine_casing'))
            .where('E', Predicates.blocks('gtnn:process_machine_casing'))
            .where('A', Predicates.blocks('gtceu:steel_frame'))
            .where('B', Predicates.blocks('gtceu:clean_machine_casing')
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1)))
            .where('Y', Predicates.controller(Predicates.blocks(definition.get())))
            .build())  
            .workableCasingModel(
                "gtceu:block/casings/solid/machine_casing_clean_stainless_steel",
                "gtceu:block/machines/assembler",)

         event.create('planetary_miner', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('planetary_miner')
            .pattern(definition => FactoryBlockPattern.start()
                .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "         A         ", "         A         ", "         A         ", "         A         ", "         A         ", "        BCB        ", "       BCCCB       ", "       CCDCC       ", "       BCCCB       ", "        BCB        ")
                .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "         A         ", "         A         ", "         A         ", "         A         ", "                   ", "                   ", "                   ", "                   ", "         A         ", "        EEE        ", "       AEDEA       ", "        EEE        ", "         A         ")
                .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "         A         ", "                   ", "                   ", "                   ", "         A         ", "                   ", "                   ", "                   ", "                   ", "         A         ", "        EEE        ", "       AEDEA       ", "        EEE        ", "         A         ")
                .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "      BBBBBBB      ", "      AAAAAAA      ", "         C         ", "         C         ", "         C         ", "         A         ", "                   ", "                   ", "                   ", "                   ", "         A         ", "        EEE        ", "       AEDEA       ", "        EEE        ", "         A         ")
                .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "     BB  B  BB     ", "     AA     AA     ", "                   ", "                   ", "                   ", "         A         ", "                   ", "                   ", "                   ", "                   ", "         A         ", "        EEE        ", "       AEDEA       ", "        EEE        ", "         A         ")
                .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "    BB   B   BB    ", "    AA       AA    ", "     C       C     ", "     C       C     ", "     C       C     ", "     AAAAAAAAA     ", "                   ", "                   ", "                   ", "                   ", "         A         ", "        EEE        ", "       AEDEA       ", "        EEE        ", "         A         ")
                .aisle("                   ", "                   ", "                   ", "         F         ", "         F         ", "         F         ", "         F         ", "         F         ", "        FFF        ", "   BB  BBBBB  BB   ", "   AA         AA   ", "                   ", "                   ", "                   ", "     ACCCCCCCA     ", "      AEEEEEA      ", "      AEEEEEA      ", "      AEEEEEA      ", "      CCCCCCC      ", "        BCB        ", "       BCCCB       ", "       CCDCC       ", "       BCCCB       ", "        BCB        ")
                .aisle("                   ", "                   ", "        FFF        ", "       F   F       ", "       F   F       ", "       F   F       ", "       F   F       ", "       F   F       ", "       F   F       ", "   B  BB   BB  B   ", "   A           A   ", "                   ", "                   ", "                   ", "     ACDDDDDCA     ", "      E  D  E      ", "      E  D  E      ", "      E  D  E      ", "      CDDDDDC      ", "                   ", "B     B     B     B", "CAAAAAC  D  CAAAAAC", "B     B     B     B", "                   ")
                .aisle("        F F        ", "        F F        ", "       F   F       ", "                   ", "                   ", "                   ", "                   ", "                   ", "      F     F      ", "   B  B     B  B   ", "   A           A   ", "                   ", "                   ", "                   ", "     ACD   DCA     ", "      E     E      ", "      E     E      ", "      E     E      ", "      CD D DC      ", "B     B     B     B", "CEEEEEC     CEEEEEC", "CEEEEEC  D  CEEEEEC", "CEEEEEC     CEEEEEC", "B     B     B     B")
                .aisle("                   ", "                   ", "       F   F       ", "      F     F      ", "      F     F      ", "      F     F      ", "      F     F      ", "      F     F      ", "      F     F      ", "   BBBB     BBBB   ", "  AA           AA  ", " A C           C A ", " A C           C A ", " A C           C A ", "AAAAAACD   DCAAAAAA", "A     ED   DE     A", "A     ED   DE     A", "A     ED   DE     A", "A     CDDDDDC     A", "CAAAAAC  D  CAAAAAC", "CEEEEEC  D  CEEEEEC", "DDDDDDDDDDDDDDDDDDD", "CEEEEEC     CEEEEEC", "CAAAAAC     CAAAAAC")
                .aisle("        F F        ", "        F F        ", "       F   F       ", "                   ", "                   ", "                   ", "                   ", "                   ", "      F     F      ", "   B  B     B  B   ", "   A           A   ", "                   ", "                   ", "                   ", "     ACD   DCA     ", "      E     E      ", "      E     E      ", "      E     E      ", "      CD D DC      ", "B     B     B     B", "CEEEEEC     CEEEEEC", "CEEEEEC  D  CEEEEEC", "CEEEEEC     CEEEEEC", "B     B     B     B")
                .aisle("                   ", "                   ", "        FFF        ", "       F   F       ", "       F   F       ", "       F   F       ", "       F   F       ", "       F   F       ", "       F   F       ", "   B  BB   BB  B   ", "   A           A   ", "                   ", "                   ", "                   ", "     ACDDDDDCA     ", "      E  D  E      ", "      E  D  E      ", "      E  D  E      ", "      CDDDDDC      ", "                   ", "B     B     B     B", "CAAAAAC  D  CAAAAAC", "B     B     B     B", "                   ")
                .aisle("                   ", "                   ", "                   ", "         F         ", "         F         ", "         F         ", "         F         ", "         F         ", "        FFF        ", "   BB  BBBBB  BB   ", "   AA         AA   ", "                   ", "                   ", "                   ", "     ACCCCCCCA     ", "      AEEEEEA      ", "      AEEEEEA      ", "      AEEEEEA      ", "      CCCCCCC      ", "        BCB        ", "       BCCCB       ", "       CCDCC       ", "       BCCCB       ", "        BCB        ")
                .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "    BB   B   BB    ", "    AA       AA    ", "     C       C     ", "     C       C     ", "     C       C     ", "     AAAAAAAAA     ", "                   ", "                   ", "                   ", "                   ", "         A         ", "        EEE        ", "       AEDEA       ", "        EEE        ", "         A         ")
                .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "     BB  B  BB     ", "     AA     AA     ", "                   ", "                   ", "                   ", "         A         ", "                   ", "                   ", "                   ", "                   ", "         A         ", "        EEE        ", "       AEDEA       ", "        EEE        ", "         A         ")
                .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "      BBBBBBB      ", "      AAAAAAA      ", "         C         ", "         C         ", "         C         ", "         A         ", "                   ", "                   ", "                   ", "                   ", "         A         ", "        EEE        ", "       AEDEA       ", "        EEE        ", "         A         ")
                .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "         A         ", "                   ", "                   ", "                   ", "         A         ", "                   ", "                   ", "                   ", "                   ", "         A         ", "        EEE        ", "       AEDEA       ", "        EEE        ", "         A         ")
                .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "         A         ", "         A         ", "         A         ", "         A         ", "                   ", "                   ", "                   ", "                   ", "         A         ", "        EEE        ", "       AEDEA       ", "        EEE        ", "         A         ")
                .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "         A         ", "         A         ", "         A         ", "         A         ", "         A         ", "        BCB        ", "       BCCCB       ", "       CCZCC       ", "       BCCCB       ", "        BCB        ")
            
            .where('F', Predicates.blocks('gtceu:titanium_frame'))
            .where('A', Predicates.blocks('gtceu:steel_frame'))
            .where('D', Predicates.blocks('gtceu:steel_block'))
            .where('B', Predicates.blocks('gtceu:stable_machine_casing'))
            .where('E', Predicates.heatingCoils())
            .where('C', Predicates.blocks('gtceu:solid_machine_casing')
                .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('Z', Predicates.controller(Predicates.blocks(definition.get())))
            .build())  
            .workableCasingModel(
                "gtceu:block/casings/solid/machine_casing_clean_stainless_steel",
                "gtceu:block/multiblock/fusion_reactor",)

         event.create('microbial_biosphere', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('biosphere')
            .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH])
            .pattern(definition => FactoryBlockPattern.start()
            .aisle("     AAAAA     ", "      AAA      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
            .aisle("   AAAAAAAAA   ", "     AAAAA     ", "      BBB      ", "       B       ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
            .aisle("  AAAAAAAAAAA  ", "   AAAAAAAAA   ", "               ", "               ", "       B       ", "       B       ", "       B       ", "     BBBBB     ", "       B       ", "       B       ", "               ", "               ", "               ")
            .aisle(" AAAAAAAAAAAAA ", "  AAAAAAAAAAA  ", "               ", "               ", "               ", "      CCC      ", "     CCCCC     ", "    BCCCCCB    ", "     CCCCC     ", "      CCC      ", "       B       ", "               ", "               ")
            .aisle(" AAAAAAAAAAAAA ", "  AAAAAAAAAAA  ", "               ", "               ", "      CCC      ", "     C   C     ", "    C     C    ", "   BC     CB   ", "    C     C    ", "     C   C     ", "      CCC      ", "       B       ", "               ")
            .aisle("AAAAAAAAAAAAAAA", " AAAAAAAAAAAAA ", "               ", "      CCC      ", "     C   C     ", "    C     C    ", "   C       C   ", "  BC       CB  ", "   C       C   ", "    C     C    ", "     C   C     ", "      CCC      ", "       B       ")
            .aisle("AAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAA", " B           B ", "     CCCCC     ", "    C     C    ", "   C       C   ", "   C       C   ", "  BC       CB  ", "   C       C   ", "   C       C   ", "    C     C    ", "     CCCCC     ", "       B       ")
            .aisle("AAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAA", " B           B ", " B   CCCCC   B ", "  B C     C B  ", "  BC       CB  ", "  BC       CB  ", "  BC       CB  ", "  BC       CB  ", "  BC       CB  ", "   BC     CB   ", "    BCCCCCB    ", "     BBBBB     ")
            .aisle("AAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAA", " B           B ", "     CCCCC     ", "    C     C    ", "   C       C   ", "   C       C   ", "  BC       CB  ", "   C       C   ", "   C       C   ", "    C     C    ", "     CCCCC     ", "       B       ")
            .aisle("AAAAAAAAAAAAAAA", " AAAAAAAAAAAAA ", "               ", "      CCC      ", "     C   C     ", "    C     C    ", "   C       C   ", "  BC       CB  ", "   C       C   ", "    C     C    ", "     C   C     ", "      CCC      ", "       B       ")
            .aisle(" AAAAAAAAAAAAA ", "  AAAAAAAAAAA  ", "               ", "               ", "      CCC      ", "     C   C     ", "    C     C    ", "   BC     CB   ", "    C     C    ", "     C   C     ", "      CCC      ", "       B       ", "               ")
            .aisle(" AAAAAAAAAAAAA ", "  AAAAAAAAAAA  ", "               ", "               ", "               ", "      CCC      ", "     CCCCC     ", "    BCCCCCB    ", "     CCCCC     ", "      CCC      ", "       B       ", "               ", "               ")
            .aisle("  AAAAAAAAAAA  ", "   AAAAAAAAA   ", "               ", "               ", "       B       ", "       B       ", "       B       ", "     BBBBB     ", "       B       ", "       B       ", "               ", "               ", "               ")
            .aisle("   AAAAAAAAA   ", "     AAAAA     ", "      BBB      ", "       B       ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
            .aisle("     AAAAA     ", "      AZA      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")

            .where('A', Predicates.blocks('gtceu:clean_machine_casing')
            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('B', Predicates.blocks('gtceu:blue_steel_frame'))
            .where('C', Predicates.blocks('gtceu:tempered_glass'))
            .where('Z', Predicates.controller(Predicates.blocks(definition.get())))
            .build())  
            .workableCasingModel(
                "gtceu:block/casings/solid/machine_casing_clean_stainless_steel",
                "gtceu:block/multiblock/fusion_reactor",)

         event.create('lithosphere_extractor', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('lithosphere_extractor')
            .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH])
            .pattern(definition => FactoryBlockPattern.start()
            .aisle("   AAA     ", "           ", "   AAA     ", "           ")
            .aisle("  ABBBA    ", "   CCC     ", "  ABBBA    ", "    D      ")
            .aisle(" AB   BBBBB", "  C C CBBBB", " AB   BBBBB", "    D      ")
            .aisle("AB     BBC ", " C  C  CCC ", "AB     B   ", "    D      ")
            .aisle("AB     BBBB", " C  C  CBBB", "AB     BBBB", "   DDD     ")
            .aisle("AB  D  BBC ", " CCCDCCCCC ", "AB  D  B   ", " DDDDDDD   ")
            .aisle("AB     BBBB", " C  C  CBBB", "AB     BBBB", "   DDD     ")
            .aisle("AB     BBC ", " C  C  CCC ", "AB     B   ", "    D      ")
            .aisle(" AB   BBBBB", "  C C CBBBB", " AB   BBBBB", "    D      ")
            .aisle("  ABBBA    ", "   CCC     ", "  ABBBA    ", "    Z      ")
            .aisle("   AAA     ", "           ", "   AAA     ", "           ")
            .where('B', Predicates.blocks('gtceu:heatproof_machine_casing'))
            .where('A', Predicates.blocks('gtceu:blue_steel_frame'))
            .where('D', Predicates.blocks('gtceu:clean_machine_casing')
            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('Z', Predicates.controller(Predicates.blocks(definition.get())))
            .where('C', Predicates.heatingCoils())
            .build())  
            .workableCasingModel(
                "gtceu:block/casings/solid/machine_casing_clean_stainless_steel",
                "gtceu:block/multiblock/fusion_reactor",)

        event.create('microbial_fermentation_vat', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('fermentation_vat')
            .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH])
            .pattern(definition => FactoryBlockPattern.start()
            .aisle(" AAAAA ", "       ", "       ", "       ", "  BBB  ", "       ", "       ", "       ", " AAAAA ")
            .aisle("AAAAAAA", "  CCC  ", "  CCC  ", "  CCC  ", " BBBBB ", "  CCC  ", "  CCC  ", "  CCC  ", "AAAAAAA")
            .aisle("AADDDAA", " C   C ", " C   C ", " C   C ", "BB   BB", " C   C ", " C   C ", " C   C ", "AADDDAA")
            .aisle("AADDDAA", " C   C ", " C   C ", " C   C ", "BB   BB", " C   C ", " C   C ", " C   C ", "AADDDAA")
            .aisle("AADDDAA", " C   C ", " C   C ", " C   C ", "BB   BB", " C   C ", " C   C ", " C   C ", "AADDDAA")
            .aisle("AAAAAAA", "  CCC  ", "  CCC  ", "  CCC  ", " BBBBB ", "  CCC  ", "  CCC  ", "  CCC  ", "AAAAAAA")
            .aisle(" AAAAA ", "       ", "       ", "       ", "  BZB  ", "       ", "       ", "       ", " AAAAA ")
            .where('B', Predicates.blocks('gtceu:nonconducting_casing'))
            .where('C', Predicates.blocks('gtceu:tempered_glass'))
            .where('A', Predicates.blocks('gtca:casing_greenhouse')
            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('Z', Predicates.controller(Predicates.blocks(definition.get())))
            .where('D', Predicates.heatingCoils())
            .build())  
            .workableCasingModel(
                "gtceu:block/casings/gcym/nonconducting_casing",
                "gtceu:block/multiblock/fusion_reactor",)

        event.create('bio_reactor', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('bio_reactor')
            .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH])
            .pattern(definition => FactoryBlockPattern.start()
            .aisle("  AAAAA  ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "  AAAAA  ")
            .aisle(" AAAAAAA ", "  BBBBB  ", "         ", "         ", "   CCC   ", "         ", "         ", "  BBBBB  ", " AAAAAAA ")
            .aisle("AAAAAAAAA", " BBBBBBB ", "   DDD   ", "   DDD   ", "  CCCCC  ", "   DDD   ", "   DDD   ", " BBBBBBB ", "AAAAAAAAA")
            .aisle("AAAAAAAAA", " BBBBBBB ", "  D   D  ", "  D   D  ", " CC   CC ", "  D   D  ", "  D   D  ", " BBBBBBB ", "AAAAAAAAA")
            .aisle("AAAAAAAAA", " BBBBBBB ", "  D   D  ", "  D   D  ", " CC   CC ", "  D   D  ", "  D   D  ", " BBBBBBB ", "AAAAAAAAA")
            .aisle("AAAAAAAAA", " BBBBBBB ", "  D   D  ", "  D   D  ", " CC   CC ", "  D   D  ", "  D   D  ", " BBBBBBB ", "AAAAAAAAA")
            .aisle("AAAAAAAAA", " BBBBBBB ", "   DDD   ", "   DDD   ", "  CCCCC  ", "   DDD   ", "   DDD   ", " BBBBBBB ", "AAAAAAAAA")
            .aisle(" AAAAAAA ", "  BBBBB  ", "         ", "         ", "   CCC   ", "         ", "         ", "  BBBBB  ", " AAAAAAA ")
            .aisle("  AAZAA  ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "  AAAAA  ")
            .where('B', Predicates.blocks('gtca:dural_casing'))
            .where('C', Predicates.blocks('gtca:vitallium_casing'))
            .where('A', Predicates.blocks('gtceu:heatproof_machine_casing')
            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('Z', Predicates.controller(Predicates.blocks(definition.get())))
            .where('D', Predicates.heatingCoils())
            .build())  
            .workableCasingModel(
                "gtceu:block/casings/solid/machine_casing_heatproof",
                "gtceu:block/multiblock/fusion_reactor",)

        event.create('heavy_assembler', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('heavy_assembler')
            .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH])
            .pattern(definition => FactoryBlockPattern.start()
            .aisle("AAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAA", "ABBBBBBBBBBBBBBBA", "AAAAAAAAAAAAAAAAA", "                 ", "                 ", "                 ")
            .aisle("ACCCCCCCCCCCCCCCA", "B               B", "B               B", "A               A", "AAAAAAAAAAAAAAAAA", "                 ", "                 ")
            .aisle("ACCCCCCCCCCCCCCCA", "B               B", "B               B", "B               B", "A               A", "ABBBBBBBBBBBBBBBA", "                 ")
            .aisle("ACCCCCCCCCCCCCCCA", "B               B", "B               B", "B               B", "B               B", "ABBBBBBBBBBBBBBBA", "                 ")
            .aisle("ACCCCCCCCCCCCCCCA", "DDDDDDDDDDDDDDDDD", "D               D", "B               B", "B               B", "A               A", "ABBBBBBBBBBBBBBBA")
            .aisle("ACCCCCCCCCCCCCCCA", "I               O", "D               D", "D E  E  E  E  E D", "B E  E  E  E  E B", "B E  E  E  E  E B", "AAAAAAAAAAAAAAAAA")
            .aisle("ACCCCCCCCCCCCCCCA", "DDDDDDDDDDDDDDDDD", "D               D", "B               B", "B               B", "A               A", "ABBBBBBBBBBBBBBBA")
            .aisle("ACCCCCCCCCCCCCCCA", "B               B", "B               B", "B               B", "B               B", "ABBBBBBBBBBBBBBBA", "                 ")
            .aisle("ACCCCCCCCCCCCCCCA", "B               B", "B               B", "B               B", "A               A", "ABBBBBBBBBBBBBBBA", "                 ")
            .aisle("ACCCCCCCCCCCCCCCA", "B               B", "B               B", "A               A", "AAAAAAAAAAAAAAAAA", "                 ", "                 ")
            .aisle("AAAAAAAAAAAAAAAAA", "AAAAAAAAZAAAAAAAA", "ABBBBBBBBBBBBBBBA", "AAAAAAAAAAAAAAAAA", "                 ", "                 ", "                 ")
            .where('A', Predicates.blocks('gtceu:solid_machine_casing'))
            .where('B', Predicates.blocks('gtceu:tempered_glass'))
            .where('C', Predicates.blocks('gtceu:clean_machine_casing'))
            .where('E', Predicates.blocks('gtca:vitallium_casing'))
            .where('D', Predicates.blocks('gtca:tantalloy61_casing')
            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                .or(Predicates.abilities(PartAbility.INPUT_ENERGY)))
            .where('I', Predicates.abilities(PartAbility.IMPORT_ITEMS))
            .where('O', Predicates.abilities(PartAbility.EXPORT_ITEMS))
            .where('Z', Predicates.controller(Predicates.blocks(definition.get())))
            .build())  
            .workableCasingModel(
                "gtceu:block/casings/solid/machine_casing_solid_steel",
                "gtca:block/multiblock/aebf",)

        event.create('air_collector', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes(GTRecipeTypes.GAS_COLLECTOR_RECIPES)
            .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH])
            .pattern(definition => FactoryBlockPattern.start()
            .aisle(" AAA ", " B B ", " B B ", " B B ", " B B ", " B B ", " B B ", " B B ", " AAA ")
            .aisle("AAAAA", "BC CB", "BC CB", "BC CB", "BC CB", "BC CB", "BC CB", "BC CB", "AAAAA")
            .aisle("AAAAA", "  D  ", "  D  ", "  D  ", "  D  ", "  D  ", "  D  ", "  D  ", "AAAAA")
            .aisle("AAAAA", "BC CB", "BC CB", "BC CB", "BC CB", "BC CB", "BC CB", "BC CB", "AAAAA")
            .aisle(" AZA ", " B B ", " B B ", " B B ", " B B ", " B B ", " B B ", " B B ", " AAA ")
            .where('B', Predicates.blocks('gtceu:tempered_glass'))
            .where('D', Predicates.blocks('gtceu:engine_intake_casing'))
            .where('C', Predicates.blocks('gtceu:aluminium_frame'))
            .where('A', Predicates.blocks('gtceu:frostproof_machine_casing')
                .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('Z', Predicates.controller(Predicates.blocks(definition.get())))
            .build())  
            .workableCasingModel(
                "gtceu:block/casings/solid/machine_casing_frost_proof",
                "gtca:block/multiblock/aebf",)


        event.create('vacuummor', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('vacuummor')
            .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH])
            .pattern(definition => FactoryBlockPattern.start()
            .aisle(" ABBBA ", " ACCCA ", " A   A ", " ADDDA ", " A   A ", " ACCCA ", " A   A ", " ADDDA ", " A   A ", " ACCCA ", " ABBBA ")
            .aisle("ABBBBBA", "AC   CA", "ACCCCCA", "AC   CA", "ACCCCCA", "AC   CA", "ACCCCCA", "AC   CA", "ACCCCCA", "AC   CA", "ABBBBBA")
            .aisle("BBBBBBB", "C     C", " C   C ", "D     D", " C   C ", "C     C", " C   C ", "D     D", " C   C ", "C     C", "BBBBBBB")
            .aisle("BBBBBBB", "C     C", " C   C ", "D     D", " C   C ", "C     C", " C   C ", "D     D", " C   C ", "C     C", "BBBBBBB")
            .aisle("BBBBBBB", "C     C", " C   C ", "D     D", " C   C ", "C     C", " C   C ", "D     D", " C   C ", "C     C", "BBBBBBB")
            .aisle("ABBBBBA", "AC   CA", "ACCCCCA", "AC   CA", "ACCCCCA", "AC   CA", "ACCCCCA", "AC   CA", "ACCCCCA", "AC   CA", "ABBBBBA")
            .aisle(" ABZBA ", " ACCCA ", " A   A ", " ADDDA ", " A   A ", " ACCCA ", " A   A ", " ADDDA ", " A   A ", " ACCCA ", " ABBBA ")
            .where('D', Predicates.blocks('gtceu:tempered_glass'))
            .where('C', Predicates.blocks('gtceu:clean_machine_casing'))
            .where('A', Predicates.blocks('gtceu:aluminium_frame'))
            .where('B', Predicates.blocks('gtceu:large_scale_assembler_casing')
            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('Z', Predicates.controller(Predicates.blocks(definition.get())))
            .build())  
            .workableCasingModel(
                "gtceu:block/casings/gcym/large_scale_assembling_casing",
                "gtca:block/multiblock/aebf",)

        event.create('salt_exchanger', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('salt_exchanger')
            .pattern(definition => FactoryBlockPattern.start()
            .aisle("AAABAAA", " ABOBA ", "   B   ")
            .aisle("CAABAAC", "CCBCBCC", " AABAA ")
            .aisle("AAABAAA", " ABCBA ", "   B   ")
            .aisle("CAABAAC", "CCBCBCC", " AABAA ")
            .aisle("AAABAAA", " ABCBA ", "   B   ")
            .aisle("CAABAAC", "CCBCBCC", " AABAA ")
            .aisle("AAABAAA", " ABCBA ", "   B   ")
            .aisle("CAABAAC", "CCBCBCC", " AABAA ")
            .aisle("AAABAAA", " ABCBA ", "   B   ")
            .aisle("CAABAAC", "CCBCBCC", " AABAA ")
            .aisle("AAABAAA", " ABZBA ", "   B   ")
            .where('C', Predicates.heatingCoils())
            .where('B', Predicates.blocks('gtceu:titanium_pipe_casing'))
            .where('O', Predicates.abilities(PartAbility.OUTPUT_ENERGY))
            .where('A', Predicates.blocks('gtceu:heatproof_machine_casing')
                .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS))
                .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS)))
            .where('Z', Predicates.controller(Predicates.blocks(definition.get())))
            .build())  
            .workableCasingModel(
                "gtceu:block/casings/solid/machine_casing_heatproof",
                "gtca:block/multiblock/aebf",)

        event.create('salt_boiler', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('salt_boiler')
            .pattern(definition => FactoryBlockPattern.start()
            .aisle("AAAAAAAAA", "B       B", "B       B", "B       B", "B       B", "B       B", "AAAAAAAAA")
            .aisle("AAAAAAAAA", "         ", "  CC  CC ", " CC  CC  ", "CC  CC   ", "         ", "AAAAAAAAA")
            .aisle("AAAAAAAAA", "B       B", "C  CC  CC", "DDDDDDDDD", "C  CC  CC", "B       B", "AAAAAAAAA")
            .aisle("AAAAAAAAA", "         ", "CC  CC   ", " CC  CC  ", "  CC  CC ", "         ", "AAAAAAAAA")
            .aisle("AAAAZAAAA", "B       B", "B       B", "B       B", "B       B", "B       B", "AAAAAAAAA")
            .where('D', Predicates.blocks('gtceu:steel_pipe_casing'))
            .where('C', Predicates.blocks('gtceu:titanium_pipe_casing'))
            .where('B', Predicates.blocks('gtceu:invar_frame'))
            .where('A', Predicates.blocks('gtceu:heatproof_machine_casing')
                .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('Z', Predicates.controller(Predicates.blocks(definition.get())))
            .build())  
            .workableCasingModel(
                "gtceu:block/casings/solid/machine_casing_heatproof",
                "gtca:block/multiblock/aebf",)

        event.create('ray_receiver', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('ray_receiver')
            .pattern(definition => FactoryBlockPattern.start()
            .aisle("   AAAAAAA   ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ")
            .aisle("  AAAAAAAAA  ", "   BBBBBBB   ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ")
            .aisle(" AAAAAAAAAAA ", "  BBBBBBBBB  ", "             ", "             ", "             ", "             ", "             ", "             ", "      A      ", "     AAA     ", "             ", "             ", "             ")
            .aisle("AAAAAAAAAAAAA", " BBBBBBBBBBB ", "     CCC     ", "             ", "             ", "             ", "             ", "      A      ", "     AAA     ", "    A D A    ", "             ", "             ", "             ")
            .aisle("AAAAAAAAAAAAA", " BBBBBBBBBBB ", "    CBBBC    ", "     CCC     ", "      E      ", "             ", "      D      ", "     AAA     ", "    A   A    ", "   A     A   ", "      D      ", "             ", "             ")
            .aisle("AAAAAAAAAAAAA", " BBBBBBBBBBB ", "   CBBBBBC   ", "    CBBBC    ", "     EEE     ", "      D      ", "     DAD     ", "    AA AA    ", "   A     A   ", "  A       A  ", "             ", "      D      ", "             ")
            .aisle("AAAAAAAAAAAAA", " BBBBBBBBBBB ", "   CBBBBBC   ", "    CBBBC    ", "    EEAEE    ", "     DAD     ", "    DAAAD    ", "   AA   AA   ", "  AA     AA  ", "  AD     DA  ", "    D   D    ", "     D D     ", "      A      ")
            .aisle("AAAAAAAAAAAAA", " BBBBBBBBBBB ", "   CBBBBBC   ", "    CBBBC    ", "     EEE     ", "      D      ", "     DAD     ", "    AA AA    ", "   A     A   ", "  A       A  ", "             ", "      D      ", "             ")
            .aisle("AAAAAAAAAAAAA", " BBBBBBBBBBB ", "    CBBBC    ", "     CCC     ", "      E      ", "             ", "      D      ", "     AAA     ", "    A   A    ", "   A     A   ", "      D      ", "             ", "             ")
            .aisle("AAAAAAAAAAAAA", " BBBBBBBBBBB ", "     CCC     ", "             ", "             ", "             ", "             ", "      A      ", "     AAA     ", "    A D A    ", "             ", "             ", "             ")
            .aisle(" AAAAAAAAAAA ", "  BBBBBBBBB  ", "             ", "             ", "             ", "             ", "             ", "             ", "      A      ", "     AAA     ", "             ", "             ", "             ")
            .aisle("  AAAAAAAAA  ", "   BBBBBBB   ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ")
            .aisle("   AAAZAAA   ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ")
            .where('D', Predicates.blocks('gtceu:titanium_frame'))
            .where('E', Predicates.blocks('gtceu:titanium_gearbox'))
            .where('C', Predicates.blocks('gtceu:titanium_firebox_casing'))
            .where('B', Predicates.blocks('gtceu:steel_turbine_casing'))
            .where('A', Predicates.blocks('gtceu:clean_machine_casing')
                .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('Z', Predicates.controller(Predicates.blocks(definition.get())))
            .build())  
            .workableCasingModel(
                "gtceu:block/casings/solid/machine_casing_clean_stainless_steel",
                "gtca:block/multiblock/aebf",)


        event.create('lava_generator', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('lava_generator')
            .pattern(definition => FactoryBlockPattern.start()
            .aisle("AAAAAAA", " BC CB ", " BC CB ", " BC CB ", "AAABAAA", " BC CB ", " BC CB ", " BC CB ", "AAAAAAA", "       ")
            .aisle("A  A  A", "B  A  B", "B  A  B", "B  A  B", "A  B  A", "B  A  B", "B  A  B", "B  A  B", "A  A  A", " DBYBD ")
            .aisle("A     A", "C     C", "C     C", "C     C", "A     A", "C     C", "C     C", "C     C", "A     A", " BBCBB ")
            .aisle("AA   AA", " A   A ", " A   A ", " A   A ", "BB   BB", " A   A ", " A   A ", " A   A ", "AA   AA", " DCXCD ")
            .aisle("A     A", "C     C", "C     C", "C     C", "A     A", "C     C", "C     C", "C     C", "A     A", " BBCBB ")
            .aisle("A  A  A", "B  A  B", "B  A  B", "B  A  B", "A  B  A", "B  A  B", "B  A  B", "B  A  B", "A  A  A", " DBVBD ")
            .aisle("AAAAAAA", " BC CB ", " BC CB ", " BC CB ", "AAAZAAA", " BC CB ", " BC CB ", " BC CB ", "AAAAAAA", "       ")
            .where('D', Predicates.blocks('gtnn:process_machine_casing'))
            .where('C', Predicates.blocks('gtceu:high_temperature_smelting_casing'))
            .where('B', Predicates.blocks('gtca:nimonic80a_casing'))
            .where('A', Predicates.heatingCoils())
            .where('Z', Predicates.controller(Predicates.blocks(definition.get())))
            .where('V', Predicates.abilities(PartAbility.IMPORT_FLUIDS))
            .where('X', Predicates.abilities(PartAbility.OUTPUT_ENERGY))
            .where('Y', Predicates.abilities(PartAbility.EXPORT_FLUIDS))
            .build())  
            .workableCasingModel(
                "gtca:block/casing/nimonic_80_a_casing",
                "gtca:block/multiblock/aebf",)

        event.create('quicksilver_turbine', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('quicksilver_turbine')
            .pattern(definition => FactoryBlockPattern.start()
            .aisle("                   ", "                   ", "                   ", "      AAVVVAA      ", "                   ", "                   ", "                   ")
            .aisle("                   ", "      A     A      ", "      A     A      ", "      A     A      ", "      A     A      ", "      A     A      ", "                   ")
            .aisle("      A     A      ", "      A     A      ", "      ABBBBBA      ", "      ACCCCCA      ", "      ABBBBBA      ", "      A     A      ", "      A     A      ")
            .aisle(" D    A     A    D ", " B    ABBBBBA    B ", " BB   D     D   BB ", "  BBBD       DBBB  ", "      D     D      ", "      ABBBBBA      ", "      A     A      ")
            .aisle("D D   A     A   D D", "B B   ACCCCCA   B B", "B  BBD       DBB  B", " B   D       D   B ", "  BBBD       DBBB  ", "      ACCCCCA      ", "      A     A      ")
            .aisle(" D    A     A    D ", " B    ABBBBBA    B ", " BB   D     D   BB ", "  BBBD       DBBB  ", "      D     D      ", "      ABBBBBA      ", "      A     A      ")
            .aisle("      A     A      ", "      A     A      ", "      ABBBBBA      ", "      ACCCCCA      ", "      ABBBBBA      ", "      A     A      ", "      A     A      ")
            .aisle("                   ", "      A     A      ", "      A     A      ", "      A     A      ", "      A     A      ", "      A     A      ", "                   ")
            .aisle("                   ", "                   ", "                   ", "      AAAZAAA      ", "                   ", "                   ", "                   ")
            .where('D', Predicates.blocks('gtca:casing_aebf'))
            .where('A', Predicates.blocks('gtceu:large_scale_assembler_casing'))
            .where('C', Predicates.blocks('gtceu:molybdenum_disilicide_coil_block'))
            .where('B', Predicates.blocks('gtca:borsilicate_reinforced_iridium_glass'))
            .where('Z', Predicates.controller(Predicates.blocks(definition.get())))
            .where('V', Predicates.autoAbilities(definition.getRecipeTypes()))
            .build())  
            .workableCasingModel(
                "gtceu:block/casings/gcym/large_scale_assembling_casing",
                "gtca:block/multiblock/aebf",)

        event.create('cryo_dynamo', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('cryo_dynamo')
            .pattern(definition => FactoryBlockPattern.start()
            .aisle(" AVVVA ", "       ", "       ", "       ", "       ", "       ", "       ", "       ", "       ", "       ", " AAAAA ")
            .aisle("AAAAAAA", "  BBB  ", "  BBB  ", "  BBB  ", "  BBB  ", "  BBB  ", "  BBB  ", "  BBB  ", "  BBB  ", "  BBB  ", "AAAAAAA")
            .aisle("AAAAAAA", " B C B ", " B   B ", " B   B ", " B   B ", " B   B ", " B   B ", " B   B ", " B   B ", " B C B ", "AAAAAAA")
            .aisle("AAAAAAA", " BCDCB ", " B D B ", " B D B ", " B D B ", " B D B ", " B D B ", " B D B ", " B D B ", " BCDCB ", "AAAAAAA")
            .aisle("AAAAAAA", " B C B ", " B   B ", " B   B ", " B   B ", " B   B ", " B   B ", " B   B ", " B   B ", " B C B ", "AAAAAAA")
            .aisle("AAAAAAA", "  BBB  ", "  BBB  ", "  BBB  ", "  BBB  ", "  BBB  ", "  BBB  ", "  BBB  ", "  BBB  ", "  BBB  ", "AAAAAAA")
            .aisle(" AAZAA ", "       ", "       ", "       ", "       ", "       ", "       ", "       ", "       ", "       ", " AAAAA ")
            .where('C', Predicates.blocks('architects:palette:chiseled_packed_ice'))
            .where('D', Predicates.blocks('architects_palette:packed_ice_pillar'))
            .where('B', Predicates.blocks('gtceu:fusion_glass'))
            .where('A', Predicates.blocks('gtca:nimonic80a_casing'))
            .where('Z', Predicates.controller(Predicates.blocks(definition.get())))
            .where('V', Predicates.autoAbilities(definition.getRecipeTypes()))
            .build())  
            .workableCasingModel(
                "gtca:block/casing/nimonic_80_a_casing",
                "gtca:block/multiblock/aebf",)

        event.create('bio_fusion', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('bio_fusion')
            .pattern(definition => FactoryBlockPattern.start()
            .aisle("           ", "           ", "           ", "   AAAAA   ", "           ", "           ", "           ")
            .aisle("    VVV    ", "     C     ", "   AAAAA   ", "  ADDDDDA  ", "   AAAAA   ", "     C     ", "    BBB    ")
            .aisle("  BBBBBBB  ", "           ", "  A     A  ", " ADAAAAADA ", "  A     A  ", "           ", "  BBBBBBB  ")
            .aisle("  BBBBBBB  ", "           ", " A       A ", "ADA     ADA", " A       A ", "           ", "  BBBBBBB  ")
            .aisle(" BBBBBBBBB ", "           ", " A       A ", "ADA     ADA", " A       A ", "           ", " BBBBBBBBB ")
            .aisle(" BBBBBBBBB ", " C       C ", " A       A ", "ADA     ADA", " A       A ", " C       C ", " BBBBBBBBB ")
            .aisle(" BBBBBBBBB ", "           ", " A       A ", "ADA     ADA", " A       A ", "           ", " BBBBBBBBB ")
            .aisle("  BBBBBBB  ", "           ", " A       A ", "ADA     ADA", " A       A ", "           ", "  BBBBBBB  ")
            .aisle("  BBBBBBB  ", "           ", "  A     A  ", " ADAAAAADA ", "  A     A  ", "           ", "  BBBBBBB  ")
            .aisle("    BZB    ", "     C     ", "   AAAAA   ", "  ADDDDDA  ", "   AAAAA   ", "     C     ", "    BBB    ")
            .aisle("           ", "           ", "           ", "   AAAAA   ", "           ", "           ", "           ")
            .where('C', Predicates.blocks('gtceu:neutronium_frame'))
            .where('B', Predicates.blocks('gtceu:high_temperature_smelting_casing'))
            .where('D', Predicates.blocks('gtceu:fusion_casing'))
            .where('A', Predicates.blocks('gtceu:superconducting_coil'))
            .where('Z', Predicates.controller(Predicates.blocks(definition.get())))
            .where('V', Predicates.autoAbilities(definition.getRecipeTypes()))
            .build())  
            .workableCasingModel(
                "gtceu:block/casings/gcym/large_scale_assembling_casing",
                "gtca:block/multiblock/aebf",)

        event.create('naquadria_core', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('naquadria_core')
            .pattern(definition => FactoryBlockPattern.start()
            .aisle("                     ", "                     ", "                     ", "                     ", "A                   A", "A                   A", "A                   A", "                     ", "                     ")
            .aisle("B                   B", "B                   B", "B                   B", "A                   A", "AC        D        CA", "AC       DDD       CA", "AC        D        CA", "A                   A", "                     ")
            .aisle("B                   B", "                     ", "A                   A", "AC        D        CA", "AC       DDD       CA", "ACBBB   DDDDD   BBBCA", "AC       DDD       CA", "AC        D        CA", "A                   A")
            .aisle("BBBBBBBBBVZVBBBBBBBBB", "                     ", "A                   A", "AC       DDD       CA", "ACBBB   DDDDD   BBBCA", "ACCCCBE DDDDD EBCCCCA", "ACBBB   DDDDD   BBBCA", "AC       DDD       CA", "A                   A")
            .aisle("B                   B", "                     ", "A                   A", "AC        D        CA", "AC       DDD       CA", "ACBBB   DDDDD   BBBCA", "AC       DDD       CA", "AC        D        CA", "A                   A")
            .aisle("B                   B", "B                   B", "B                   B", "A                   A", "AC        D        CA", "AC       DDD       CA", "AC        D        CA", "A                   A", "                     ")
            .aisle("                     ", "                     ", "                     ", "                     ", "A                   A", "A                   A", "A                   A", "                     ", "                     ")
            .where('D', Predicates.blocks('gtceu:fusion_casing_mk3'))
            .where('E', Predicates.blocks('gtceu:superconducting_coil'))
            .where('B', Predicates.blocks('gtceu:neutronium_frame'))
            .where('A', Predicates.blocks('gtceu:large_scale_assembler_casing'))
            .where('C', Predicates.blocks('gtceu:atomic_casing'))
            .where('Z', Predicates.controller(Predicates.blocks(definition.get())))
            .where('V', Predicates.autoAbilities(definition.getRecipeTypes()))
            .build())  
            .workableCasingModel(
                "gtceu:block/casings/gcym/large_scale_assembling_casing",
                "gtca:block/multiblock/aebf",)

        event.create('primitive_drill', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('ulv_miner')
            .pattern(definition => FactoryBlockPattern.start()
            .aisle("AAA", " B ", " B ", " B ", "   ", "   ", "   ")
            .aisle("AAA", "BAB", "BAB", "BAB", " B ", " B ", " B ")
            .aisle("ACA", " B ", " B ", " B ", "   ", "   ", "   ")
            .where('B', Predicates.blocks('gtceu:wood_frame'))
            .where('A', Predicates.blocks('kubejs:crude_casing')
            .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('C', Predicates.controller(Predicates.blocks(definition.get())))
            .build())  
            .workableCasingModel(
                "kubejs:block/casing/soul/casing",
                "gtca:block/multiblock/aebf",)

        event.create('primitive_macerator', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('ulv_macerator')
            .pattern(definition => FactoryBlockPattern.start()
            .aisle("ABBBA", "ABBBA", "ABBBA", "ABBBA", "ABBBA")
            .aisle("BBBBB", "     ", "  A  ", "     ", "BBBBB")
            .aisle("BBBBB", "     ", "  B  ", "     ", "BBBBB")
            .aisle("BBBBB", "     ", "     ", "     ", "BBBBB")
            .aisle("BBBBB", "     ", "  B  ", "     ", "BBBBB")
            .aisle("BBBBB", "     ", "  A  ", "     ", "BBBBB")
            .aisle("ABCBA", "ABBBA", "ABBBA", "ABBBA", "ABBBA")
            .where('A', Predicates.blocks('gtceu:wood_frame'))
            .where('B', Predicates.blocks('kubejs:crude_casing')
            .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('C', Predicates.controller(Predicates.blocks(definition.get())))
            .build())  
            .workableCasingModel(
                "kubejs:block/casing/soul/casing",
                "gtca:block/multiblock/aebf",)

        event.create('primitive_sifter', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('ulv_sifter')
            .pattern(definition => FactoryBlockPattern.start()
            .aisle("AAAAA", "BBABB", "BBABB", "BBABB", "AAAAA")
            .aisle("ACCCA", "B   B", "B   B", "B   B", "ACCCA")
            .aisle("ACCCA", "A   A", "A   A", "A   A", "ACCCA")
            .aisle("ACCCA", "B   B", "B   B", "B   B", "ACCCA")
            .aisle("AAAAA", "BBABB", "BBDBB", "BBABB", "AAAAA")
            .where('C', Predicates.blocks('gtceu:wood_frame'))
            .where('B', Predicates.blocks('connectedglass:borderless_glass'))
            .where('A', Predicates.blocks('kubejs:crude_casing')
            .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('D', Predicates.controller(Predicates.blocks(definition.get())))
            .build())  
            .workableCasingModel(
                "kubejs:block/casing/soul/casing",
                "gtca:block/multiblock/aebf",)

        event.create('ashen_kiln', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('ashen_kiln')
            .pattern(definition => FactoryBlockPattern.start()
            .aisle("ABBBA", "ABBBA", "ABBBA", "ABBBA", "ABBBA", " ABA ", "  B  ", "  A  ")
            .aisle("BBBBB", "B   B", "B   B", "B   B", "B   B", "A   A", " A A ", "  A  ")
            .aisle("BBBBB", "B   B", "B   B", "B   B", "B   B", "B   B", "B   B", "AAAAA")
            .aisle("BBBBB", "B   B", "B   B", "B   B", "B   B", "A   A", " A A ", "  A  ")
            .aisle("ABCBA", "ABBBA", "ABBBA", "ABBBA", "ABBBA", " ABA ", "  B  ", "  A  ")
            .where('A', Predicates.blocks('gtceu:wood_frame'))
            .where('B', Predicates.blocks('minecraft:bricks')
            .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('C', Predicates.controller(Predicates.blocks(definition.get())))
            .build())  
            .workableCasingModel(
                "minecraft:blocks/brick_block",
                "gtca:block/multiblock/aebf",)

        event.create('washing_basin', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('washing_basin')
            .pattern(definition => FactoryBlockPattern.start()
            .aisle("ABBBA", "ACCCA", "AAAAA", "ACCCA", "ABBBA")
            .aisle("BAAAB", "C   C", "A   A", "C   C", "BAAAB")
            .aisle("BAAAB", "C   C", "A   A", "C   C", "BAAAB")
            .aisle("BAAAB", "C   C", "A   A", "C   C", "BAAAB")
            .aisle("ABBBA", "ACCCA", "AADAA", "ACCCA", "ABBBA")
            .where('B', Predicates.blocks('gtceu:wood_frame'))
            .where('C', Predicates.blocks('connectedglass:borderless_glass'))
            .where('A', Predicates.blocks('kubejs:crude_casing')
            .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('D', Predicates.controller(Predicates.blocks(definition.get())))
            .build())  
            .workableCasingModel(
                "kubejs:block/casing/soul/casing",
                "gtca:block/multiblock/aebf",)

        event.create('atmospheric_electrolyzer', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('atmospheric_electrolyzer')
            .pattern(definition => FactoryBlockPattern.start()
            .aisle("AAA", "ABA", "ABA", "ABA", "AAA")
            .aisle("AAA", "D D", "D D", "D D", "AAA")
            .aisle("ACA", "ABA", "ABA", "ABA", "AAA")
            .where('B', Predicates.blocks('gtceu:wood_frame'))
            .where('D', Predicates.blocks('connectedglass:borderless_glass'))
            .where('A', Predicates.blocks('kubejs:crude_casing')
            .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('C', Predicates.controller(Predicates.blocks(definition.get())))
            .build())  
            .workableCasingModel(
                "kubejs:block/casing/soul/casing",
                "gtca:block/multiblock/aebf",)

        event.create('centrifugal_seperator', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('ulv_centrifuge')
            .pattern(definition => FactoryBlockPattern.start()
            .aisle(" AAAAA ", " ABABA ", "   B   ", "       ", "       ")
            .aisle("AAAAAAA", "AB   BA", " BB BB ", "   B   ", "       ")
            .aisle("AAAAAAA", "B     B", " B   B ", "   B   ", "       ")
            .aisle("AAAAAAA", "A  A  A", "B  A  B", " BBABB ", "   B   ")
            .aisle("AAAAAAA", "B     B", " B   B ", "   B   ", "       ")
            .aisle("AAAAAAA", "AB   BA", " BB BB ", "   B   ", "       ")
            .aisle(" AACAA ", " ABABA ", "   B   ", "       ", "       ")
            .where('B', Predicates.blocks('gtceu:wood_frame'))
            .where('A', Predicates.blocks('kubejs:crude_casing')
            .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('C', Predicates.controller(Predicates.blocks(definition.get())))
            .build())  
            .workableCasingModel(
                "kubejs:block/casing/soul/casing",
                "gtca:block/multiblock/aebf",)

        event.create('primitive_smeltery', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('ulv_smelter')
            .pattern(definition => FactoryBlockPattern.start()
            .aisle("AAAAA", "B   B", "B   B", "B   B", "AAAAA")
            .aisle("AAAAA", " AAA ", " AAA ", " AAA ", "AAAAA")
            .aisle("AAAAA", " A A ", " A A ", " A A ", "AAAAA")
            .aisle("AAAAA", " AAA ", " ACA ", " AAA ", "AAAAA")
            .aisle("AAAAA", "B   B", "B   B", "B   B", "AAAAA")
            .where('B', Predicates.blocks('gtceu:wood_frame'))
            .where('A', Predicates.blocks('kubejs:crude_casing')
            .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('C', Predicates.controller(Predicates.blocks(definition.get())))
            .build())  
            .workableCasingModel(
                "kubejs:block/casing/soul/casing",
                "gtca:block/multiblock/aebf",)

        event.create('aetherproof_furnace', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('aetherproof_furnace')
            .pattern(definition => FactoryBlockPattern.start()
            .aisle("  A  ", "  A  ", "  A  ", "  A  ", "     ", "     ", "     ")
            .aisle("     ", "     ", "     ", "  A  ", "     ", "     ", "     ")
            .aisle(" BBB ", "     ", "     ", "  A  ", "     ", "     ", " BBB ")
            .aisle("BBBBB", " CCC ", "  C  ", "  C  ", "  C  ", " CCC ", "BBBBB")
            .aisle("BBBBB", " C C ", " C C ", " C C ", " C C ", " C C ", "BBBBB")
            .aisle("BBBBB", " CDC ", "  C  ", "  C  ", "  C  ", " CCC ", "BBBBB")
            .aisle(" BBB ", "     ", "     ", "  A  ", "     ", "     ", " BBB ")
            .aisle("     ", "     ", "     ", "  A  ", "     ", "     ", "     ")
            .aisle("  A  ", "  A  ", "  A  ", "  A  ", "     ", "     ", "     ")
            .where('B', Predicates.blocks('gtceu:steel_firebox_casing'))
            .where('A', Predicates.blocks('gtceu:steel_pipe_casing'))
            .where('C', Predicates.blocks('gtceu:solid_machine_casing')
            .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where('D', Predicates.controller(Predicates.blocks(definition.get())))
            .build())  
            .workableCasingModel(
                "gtceu:block/casings/solid/machine_casing_solid_steel",
                "gtca:block/multiblock/aebf",)
    

    
})